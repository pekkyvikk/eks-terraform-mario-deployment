name: Deploy Mario App

on:
  workflow_dispatch:  # Manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name:  Set Up Terraform  # ✅ FIXED: Ensures Terraform is available  
        uses:  hashicorp/setup-terraform@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Retrieve & Store Bastion Host IP
        run: |
          cd Terraform
          terraform init -no-color
          terraform refresh -no-color
          
          
          BASTION_IP=$(terraform output -raw bastion_host 2>/dev/null | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n 1)
          if [[ -z "$BASTION_IP" ]]; then
            echo "❌ Error: Failed to retrieve Bastion Host IP"
            exit 1
          fi

          echo "BASTION_IP=$BASTION_IP" >> $GITHUB_ENV
          echo "✅ Bastion Host IP Retrieved: $BASTION_IP"

      - name: Debug Bastion IP
        run: |
          echo "🔍 Checking stored Bastion IP..."
          if [[ -z "${{ env.BASTION_IP }}" ]]; then
            echo "❌ Error: Bastion IP is missing!"
            exit 1
          else
            echo "✅ Bastion IP available: ${{ env.BASTION_IP }}"
          fi

      - name: SSH into Bastion and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.BASTION_IP }}
          username: ${{ secrets.BASTION_USER }}   # Ensure correct user (e.g., ec2-user)
          key: ${{ secrets.BASTION_SSH_KEY }}
          script: |
            set -e  # Exit immediately if any command fails

            echo "✅ Connected to Bastion Host"
            
            # Install AWS CLI
            echo "Checking AWS CLI installation..."
            if ! command -v aws &> /dev/null; then
              echo "AWS CLI not found. Installing..."
              sudo yum update -y
              sudo yum install -y unzip
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
           
              unzip -o awscliv2.zip  # <--- Prevents overwrite prompts
              sudo ./aws/install
              aws --version
            else
              echo "AWS CLI is already installed. Updating..."
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip -o awscliv2.zip
              sudo ./aws/install --update || sudo ./aws/instal
            fi  
            # Install kubectl
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
            kubectl version --client

            # Configure kubectl for EKS
            aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

            # Deploy Mario app
            cd ~
              echo "Installing Git if not installed..."

            if ! command -v git &> /dev/null; then

              sudo yum install -y git || sudo yum update && sudo yum install -y git

            fi

            if [ ! -d "eks-terraform-mario-deployment.git" ]; then

              echo "Cloning repository..."

              git clone https://github.com/pekkyvikk/eks-terraform-mario-deployment.git
            else
              echo "Repository already exists, pulling latest changes..."

              cd eks-terraform-mario-deployment.git && git pull origin main
            fi
            cd /home/ec2-user/eks-terraform-mario-deployment/mainfests
            kubectl apply -f mario-deployment.yaml
            

            echo "✅ Mario app deployed successfully!"


            
